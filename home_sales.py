# -*- coding: utf-8 -*-
"""Home_Sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWg3SOPnSCVQvDgqWzOaqkon9y00PpMP
"""

!pip install pyspark py4j
!pip install findspark

# Import findspark and initialize.
import findspark
findspark.init()

# Import packages
from pyspark.sql import SparkSession
import time

# Create a SparkSession
spark = SparkSession.builder.appName("SparkSQL").getOrCreate()

# 1. Read in the AWS S3 bucket into a DataFrame.
from pyspark import SparkFiles
url = "https://2u-data-curriculum-team.s3.amazonaws.com/dataviz-classroom/v1.2/22-big-data/home_sales_revised.csv"

spark.sparkContext.addFile(url)
df=spark.read.csv(SparkFiles.get("home_sales_revised.csv"),sep= "," ,header=True, inferSchema=True)
df.show()

df.printSchema()

from pyspark.sql.functions import year
import pyspark.sql.functions as f

# 2. Create a temporary view of the DataFrame.
df.createOrReplaceTempView('home_sales')

# 3. What is the average price for a four bedroom house sold per year, rounded to two decimal places?

spark.sql("""SELECT year(date) AS year, round(AVG(price),2) AS avg_price
FROM home_sales
WHERE bedrooms = 4
GROUP BY year
ORDER BY year DESC""").show()

# 4. What is the average price of a home for each year the home was built,
# that have 3 bedrooms and 3 bathrooms, rounded to two decimal places?

spark.sql("""SELECT date_built, round(AVG(price),2) AS avg_price
FROM home_sales
WHERE bedrooms = 3 AND bathrooms = 3
GROUP BY date_built
ORDER BY date_built DESC""").show()

# 5. What is the average price of a home for each year the home was built,
# that have 3 bedrooms, 3 bathrooms, with two floors,
# and are greater than or equal to 2,000 square feet, rounded to two decimal places?

spark.sql("""SELECT date_built, round(AVG(price),2) AS avg_price
FROM home_sales
WHERE bedrooms = 3 AND bathrooms = 3 AND floors = 2 AND sqft_living >= 2000
GROUP BY date_built
ORDER BY date_built DESC""").show()

# 6. What is the average price of a home per "view" rating, rounded to two decimal places,
# having an average home price greater than or equal to $350,000? Order by descending view rating.
# Although this is a small dataset, determine the run time for this query.

start_time = time.time()

spark.sql("""SELECT view, round(AVG(price),2) AS avg_price
FROM home_sales
WHERE price >= 350000
GROUP BY view
ORDER BY view DESC""").show()

print("--- %s seconds ---" % (time.time() - start_time))

# 7. Cache the the temporary table home_sales.
spark.catalog.cacheTable('home_sales')

# 8. Check if the table is cached.
spark.catalog.isCached('home_sales')

# 9. Using the cached data, run the last query above, that calculates
# the average price of a home per "view" rating, rounded to two decimal places,
# having an average home price greater than or equal to $350,000.
# Determine the runtime and compare it to the uncached runtime.

start_time = time.time()

spark.sql("""SELECT view, round(AVG(price),2) AS avg_price
FROM home_sales
WHERE price >= 350000
GROUP BY view
ORDER BY view DESC""").show()

print("--- %s seconds ---" % (time.time() - start_time))

# 10. Partition by the "date_built" field on the formatted parquet home sales data
df.write.partitionBy("date_built").mode("overwrite").parquet("partitioned_data")

# 11. Read the formatted parquet data.
p_df_p = spark.read.parquet("partitioned_data")

# 12. Create a temporary table for the parquet data.
p_df_p.createOrReplaceTempView('home_sales_partitioned')

# 13. Using the parquet DataFrame, run the last query above, that calculates
# the average price of a home per "view" rating, rounded to two decimal places,
# having an average home price greater than or equal to $350,000.
# Determine the runtime and compare it to the cached runtime.

start_time = time.time()

spark.sql("""SELECT view, round(AVG(price),2) AS avg_price
FROM home_sales_partitioned
WHERE price >= 350000
GROUP BY view
ORDER BY view DESC""").show()

print("--- %s seconds ---" % (time.time() - start_time))

# 14. Uncache the home_sales temporary table.
spark.sql("uncache table home_sales")

# 15. Check if the home_sales is no longer cached
spark.catalog.isCached("home_sales")

